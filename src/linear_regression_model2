# linear_regression.py 
#moving average and price change

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

#load csv
df = pd.read_csv("data/TSLA.csv", skiprows=2)
#df = pd.read_csv("data/AAPL.csv")
df.dropna(inplace = True)
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

#create features
df['Price_Change'] = df['Unnamed: 1'] - df['Unnamed: 1'].shift(1)
df['MA_7'] = df['Unnamed: 1'].rolling(window=7).mean()
df['Price_Range'] = df['Unnamed: 2'] - df['Unnamed: 3']
df['Close_lag'] = df['Unnamed: 1'].shift(1)
df['Volume_lag'] = df['Unnamed: 5'].shift(1)

df.dropna(inplace=True)

#parameters and target
x = df[['Unnamed: 4', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 5', 'Price_Change', 'MA_7', 'Price_Range']] #Open, High, Low, Volume
y = df['Unnamed: 1'] #Close

#test vs training data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 100)

# Create a linear regression model
model = LinearRegression()

# train (fit) the model
model.fit(x_train, y_train)

# predict model
y_predict = model.predict(x_test) 

#plot
# Evaluate
mse = mean_squared_error(y_test, y_predict)
mae = mean_absolute_error(y_test, y_predict)

print(f'Mean Squared Error (MSE): {mse}')
print(f'Mean Absolute Error (MAE): {mae}')


# Plot actual vs predicted close prices
plt.figure(figsize=(10,5))
plt.plot(y_test.values, label='Actual')
plt.plot(y_predict, label='Predicted')
plt.title('Actual vs Predicted Closing Prices')
plt.xlabel('Sample')
plt.ylabel('Close Price')
plt.legend()
plt.grid()
plt.tight_layout()
plt.show()

